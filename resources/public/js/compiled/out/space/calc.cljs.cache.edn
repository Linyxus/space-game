{:rename-macros {}, :renames {}, :externs {Math {sqrt {}}}, :use-macros {}, :excludes #{}, :name space.calc, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {sqrt {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/calc.cljs", :line 15, :column 7, :end-line 15, :end-column 11, :arglists (quote ([x])), :doc "Calculates the sqrt of the number."}, :name space.calc/sqrt, :variadic false, :file "src/space/calc.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Calculates the sqrt of the number."}, square {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/calc.cljs", :line 20, :column 7, :end-line 20, :end-column 13, :arglists (quote ([x])), :doc "Calculates the square of the number."}, :name space.calc/square, :variadic false, :file "src/space/calc.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Calculates the square of the number."}, distance {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/calc.cljs", :line 25, :column 7, :end-line 25, :end-column 15, :arglists (quote ([p1 p2])), :doc "Returns the distance of two given points."}, :name space.calc/distance, :variadic false, :file "src/space/calc.cljs", :end-column 15, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2])), :doc "Returns the distance of two given points."}, vec-div {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/calc.cljs", :line 30, :column 7, :end-line 30, :end-column 14, :arglists (quote ([v num])), :doc "Returns the dividing product of the vector."}, :name space.calc/vec-div, :variadic false, :file "src/space/calc.cljs", :end-column 14, :method-params ([v num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v num])), :doc "Returns the dividing product of the vector."}, vec-plus {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/calc.cljs", :line 35, :column 7, :end-line 35, :end-column 15, :arglists (quote ([v1 v2]))}, :name space.calc/vec-plus, :variadic false, :file "src/space/calc.cljs", :end-column 15, :method-params ([v1 v2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v1 v2]))}, next-state {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/calc.cljs", :line 38, :column 7, :end-line 38, :end-column 17, :arglists (quote ([state interval])), :doc "Returns the next state after the interval."}, :name space.calc/next-state, :variadic false, :file "src/space/calc.cljs", :end-column 17, :method-params ([state interval]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state interval])), :doc "Returns the next state after the interval."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:planets :v :force :m :pos :craft}, :order [:craft :m :v :pos :planets :force]}, :doc nil}