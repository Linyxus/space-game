{:rename-macros {}, :renames {}, :externs {Math {PI {}}, Date {prototype {getTime {}}}}, :use-macros {}, :excludes #{}, :name space.drawer, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {reset-canvas {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 25, :column 7, :end-line 25, :end-column 19, :arglists (quote ([info])), :doc "Clears the canvas and reset transformations."}, :name space.drawer/reset-canvas, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 19, :method-params ([info]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([info])), :doc "Clears the canvas and reset transformations."}, reset-transforms {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 20, :column 7, :end-line 20, :end-column 23, :arglists (quote ([ctx])), :doc "Clears all transformations."}, :name space.drawer/reset-transforms, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 23, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx])), :doc "Clears all transformations."}, rotating {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 63, :column 7, :end-line 63, :end-column 15, :arglists (quote ([ctx angle cx cy])), :doc "Sets the rotation of the canvas, with the center point."}, :name space.drawer/rotating, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 15, :method-params ([ctx angle cx cy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ctx angle cx cy])), :doc "Sets the rotation of the canvas, with the center point."}, pi {:name space.drawer/pi, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 3, :column 1, :end-line 3, :end-column 8, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 3, :column 6, :end-line 3, :end-column 8}, :tag js}, deg->rad {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 10, :column 7, :end-line 10, :end-column 15, :arglists (quote ([angle])), :doc "Transforms deg angle to rad angle."}, :name space.drawer/deg->rad, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 15, :method-params ([angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([angle])), :doc "Transforms deg angle to rad angle."}, rgba {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 31, :column 7, :end-line 31, :end-column 11, :arglists (quote ([& values])), :doc "Transforms the values into rgba string.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(values)], :arglists ([& values]), :arglists-meta (nil)}}, :name space.drawer/rgba, :variadic true, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(values)], :arglists ([& values]), :arglists-meta (nil)}, :method-params [(values)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 0, :fn-var true, :arglists ([& values]), :doc "Transforms the values into rgba string."}, prepare-background {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 42, :column 7, :end-line 42, :end-column 25, :arglists (quote ([info color])), :doc "Resets canvas and fill background."}, :name space.drawer/prepare-background, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 25, :method-params ([info color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([info color])), :doc "Resets canvas and fill background."}, std-revealer {:name space.drawer/std-revealer, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 79, :column 1, :end-line 79, :end-column 18, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 79, :column 6, :end-line 79, :end-column 18}, :tag cljs.core/IMap}, now {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 5, :column 7, :end-line 5, :end-column 10, :arglists (quote ([])), :doc "Return current timestamp. (ms) "}, :name space.drawer/now, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return current timestamp. (ms) "}, draw-shape {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 69, :column 7, :end-line 69, :end-column 17, :arglists (quote ([ctx & points])), :doc "Draws a triangle with given prints.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ctx points)], :arglists ([ctx & points]), :arglists-meta (nil)}}, :name space.drawer/draw-shape, :variadic true, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ctx points)], :arglists ([ctx & points]), :arglists-meta (nil)}, :method-params [(ctx points)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists ([ctx & points]), :doc "Draws a triangle with given prints."}, render-data {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 91, :column 7, :end-line 91, :end-column 18, :arglists (quote ([ctx data revealer])), :doc "Renders objects on the canvas according to the data and revealer given."}, :name space.drawer/render-data, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 18, :method-params ([ctx data revealer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx data revealer])), :doc "Renders objects on the canvas according to the data and revealer given."}, clear-canvas {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 15, :column 7, :end-line 15, :end-column 19, :arglists (quote ([{:keys [width height ctx]}])), :doc "Clears the canvas."}, :name space.drawer/clear-canvas, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 19, :method-params ([p__35542]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [width height ctx]}])), :doc "Clears the canvas."}, coloring {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 37, :column 7, :end-line 37, :end-column 15, :arglists (quote ([ctx color])), :doc "Changes the brush color of the canvas."}, :name space.drawer/coloring, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 15, :method-params ([ctx color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx color])), :doc "Changes the brush color of the canvas."}, draw-circle {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 55, :column 7, :end-line 55, :end-column 18, :arglists (quote ([ctx x y r])), :doc "Draws a circle on the canvas."}, :name space.drawer/draw-circle, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 18, :method-params ([ctx x y r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ctx x y r])), :doc "Draws a circle on the canvas."}, fill-rect {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :line 50, :column 7, :end-line 50, :end-column 16, :arglists (quote ([ctx x y w h])), :doc "The wrapper of HTML Canvas API fillRect."}, :name space.drawer/fill-rect, :variadic false, :file "/home/linyxus/dev/clojure/space-game/src/space/drawer.cljs", :end-column 16, :method-params ([ctx x y w h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 5, :fn-var true, :arglists (quote ([ctx x y w h])), :doc "The wrapper of HTML Canvas API fillRect."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:args :rotation :color :circle :width :type :angle :cx :cy :shape :ctx :rect :height}, :order [:width :height :ctx :rect :circle :shape :rotation :angle :cx :cy :color :type :args]}, :doc nil}