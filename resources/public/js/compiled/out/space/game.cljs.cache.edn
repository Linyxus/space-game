{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name space.game, :imports nil, :requires {drawer space.drawer, space.drawer space.drawer}, :cljs.spec/speced-vars [], :uses nil, :defs {planet-animator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 78, :column 7, :end-line 78, :end-column 22, :arglists (quote ([x y r color])), :doc "Returns an animator of a planet with given params."}, :name space.game/planet-animator, :variadic false, :file "src/space/game.cljs", :end-column 22, :method-params ([x y r color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y r color])), :doc "Returns an animator of a planet with given params."}, onclick-handler {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 155, :column 7, :end-line 155, :end-column 22, :arglists (quote ([x y])), :doc "Handles the on click event"}, :name space.game/onclick-handler, :variadic false, :file "src/space/game.cljs", :end-column 22, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Handles the on click event"}, random-color {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 150, :column 7, :end-line 150, :end-column 19, :arglists (quote ([])), :doc "Returns a random color in a array."}, :name space.game/random-color, :variadic false, :file "src/space/game.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a random color in a array."}, partition-animator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 87, :column 7, :end-line 87, :end-column 25, :arglists (quote ([x y r color end-x end-y duration])), :doc "Returns an animator displaying a moving partition."}, :name space.game/partition-animator, :variadic false, :file "src/space/game.cljs", :end-column 25, :method-params ([x y r color end-x end-y duration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 7, :fn-var true, :arglists (quote ([x y r color end-x end-y duration])), :doc "Returns an animator displaying a moving partition."}, add-animator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 101, :column 8, :end-line 101, :end-column 20, :private true, :arglists (quote ([animator])), :doc "Adds an animator to the animators list."}, :private true, :name space.game/add-animator, :variadic false, :file "src/space/game.cljs", :end-column 20, :method-params ([animator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([animator])), :doc "Adds an animator to the animators list."}, filter-animators {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 131, :column 7, :end-line 131, :end-column 23, :arglists (quote ([res ani])), :doc "Filters the animators. This function will remove the animators returning nil,\n  with the results given. Returns a lazy seq."}, :name space.game/filter-animators, :variadic false, :file "src/space/game.cljs", :end-column 23, :method-params ([res ani]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([res ani])), :doc "Filters the animators. This function will remove the animators returning nil,\n  with the results given. Returns a lazy seq."}, render-each {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 123, :column 7, :end-line 123, :end-column 18, :arglists (quote ([{:keys [animator initial]} timestamp])), :doc "Returns render data of each animator."}, :name space.game/render-each, :variadic false, :file "src/space/game.cljs", :end-column 18, :method-params ([p__42568 timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [animator initial]} timestamp])), :doc "Returns render data of each animator."}, prev-timestamp {:name space.game/prev-timestamp, :file "src/space/game.cljs", :line 19, :column 1, :end-line 19, :end-column 20, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 19, :column 6, :end-line 19, :end-column 20}, :tag any}, coord-orig->frame {:name space.game/coord-orig->frame, :file "src/space/game.cljs", :line 21, :column 1, :end-line 21, :end-column 23, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 21, :column 6, :end-line 21, :end-column 23}, :tag clj-nil}, planet-waves-animator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 65, :column 7, :end-line 65, :end-column 28, :arglists (quote ([x y min-r max-r duration color])), :doc "Return an animator of planet waves with given params."}, :name space.game/planet-waves-animator, :variadic false, :file "src/space/game.cljs", :end-column 28, :method-params ([x y min-r max-r duration color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 6, :fn-var true, :arglists (quote ([x y min-r max-r duration color])), :doc "Return an animator of planet waves with given params."}, coord-orig:frame {:name space.game/coord-orig:frame, :file "src/space/game.cljs", :line 23, :column 1, :end-line 23, :end-column 22, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 23, :column 6, :end-line 23, :end-column 22}, :tag clj-nil}, create-planet {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 112, :column 7, :end-line 112, :end-column 20, :arglists (quote ([x y r color])), :doc "Creates and add a planet."}, :name space.game/create-planet, :variadic false, :file "src/space/game.cljs", :end-column 20, :method-params ([x y r color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y r color])), :doc "Creates and add a planet."}, values-frame->orig {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 57, :column 7, :end-line 57, :end-column 25, :arglists (quote ([x y & values])), :doc "Transforms from frame to original. The first two params are x and y, the rest will\n  be processed by multipying the ratio.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(x y values)], :arglists ([x y & values]), :arglists-meta (nil)}}, :name space.game/values-frame->orig, :variadic true, :file "src/space/game.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(x y values)], :arglists ([x y & values]), :arglists-meta (nil)}, :method-params [(x y values)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists ([x y & values]), :doc "Transforms from frame to original. The first two params are x and y, the rest will\n  be processed by multipying the ratio."}, animators {:name space.game/animators, :file "src/space/game.cljs", :line 20, :column 1, :end-line 20, :end-column 15, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 20, :column 6, :end-line 20, :end-column 15}, :tag any}, render {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 139, :column 7, :end-line 139, :end-column 13, :arglists (quote ([timestamp])), :doc "Updates current state and return render data for rendering."}, :name space.game/render, :variadic false, :file "src/space/game.cljs", :end-column 13, :method-params ([timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([timestamp])), :doc "Updates current state and return render data for rendering."}, init-coord! {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 47, :column 7, :end-line 47, :end-column 18, :arglists (quote ([width height])), :doc "Initialize the coordinate system."}, :name space.game/init-coord!, :variadic false, :file "src/space/game.cljs", :end-column 18, :method-params ([width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width height])), :doc "Initialize the coordinate system."}, add-animators {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 107, :column 7, :end-line 107, :end-column 20, :arglists (quote ([& ani])), :doc "Adds several animators to the animators list.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ani)], :arglists ([& ani]), :arglists-meta (nil)}}, :name space.game/add-animators, :variadic true, :file "src/space/game.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ani)], :arglists ([& ani]), :arglists-meta (nil)}, :method-params [(ani)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 0, :fn-var true, :arglists ([& ani]), :doc "Adds several animators to the animators list."}, coord-frame->orig {:name space.game/coord-frame->orig, :file "src/space/game.cljs", :line 22, :column 1, :end-line 22, :end-column 23, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 22, :column 6, :end-line 22, :end-column 23}, :tag clj-nil}, coord-fun {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space/src/space/game.cljs", :line 25, :column 7, :end-line 25, :end-column 16, :arglists (quote ([width height])), :doc "Returns the coordinate system converters."}, :name space.game/coord-fun, :variadic false, :file "src/space/game.cljs", :end-column 16, :method-params ([width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width height])), :doc "Returns the coordinate system converters."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:args :rotation :color :circle :type :animator :initial}, :order [:type :args :rotation :color :circle :animator :initial]}, :doc nil}