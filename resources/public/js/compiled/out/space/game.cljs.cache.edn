{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name space.game, :imports nil, :requires {drawer space.drawer, space.drawer space.drawer, calc space.calc, space.calc space.calc}, :cljs.spec/speced-vars [], :uses nil, :defs {planet-animator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 142, :column 7, :end-line 142, :end-column 22, :arglists (quote ([x y r color])), :doc "Returns an animator of a planet with given params."}, :name space.game/planet-animator, :variadic false, :file "src/space/game.cljs", :end-column 22, :method-params ([x y r color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y r color])), :doc "Returns an animator of a planet with given params."}, onclick-handler {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 280, :column 7, :end-line 280, :end-column 22, :arglists (quote ([x y])), :doc "Handles the on click event"}, :name space.game/onclick-handler, :variadic false, :file "src/space/game.cljs", :end-column 22, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Handles the on click event"}, random-color {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 37, :column 7, :end-line 37, :end-column 19, :arglists (quote ([])), :doc "Returns a random color in a array."}, :name space.game/random-color, :variadic false, :file "src/space/game.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a random color in a array."}, partition-animator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 151, :column 7, :end-line 151, :end-column 25, :arglists (quote ([x y r color end-x end-y duration])), :doc "Returns an animator displaying a moving partition."}, :name space.game/partition-animator, :variadic false, :file "src/space/game.cljs", :end-column 25, :method-params ([x y r color end-x end-y duration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 7, :fn-var true, :arglists (quote ([x y r color end-x end-y duration])), :doc "Returns an animator displaying a moving partition."}, add-animator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 108, :column 8, :end-line 108, :end-column 20, :private true, :arglists (quote ([animator])), :doc "Adds an animator to the animators list."}, :private true, :name space.game/add-animator, :variadic false, :file "src/space/game.cljs", :end-column 20, :method-params ([animator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([animator])), :doc "Adds an animator to the animators list."}, craft-status {:name space.game/craft-status, :file "src/space/game.cljs", :line 26, :column 1, :end-line 26, :end-column 18, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 26, :column 6, :end-line 26, :end-column 18}, :tag any}, filter-animators {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 259, :column 7, :end-line 259, :end-column 23, :arglists (quote ([res ani])), :doc "Filters the animators. This function will remove the animators returning nil,\n  with the results given. Returns a lazy seq."}, :name space.game/filter-animators, :variadic false, :file "src/space/game.cljs", :end-column 23, :method-params ([res ani]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 2, :fn-var true, :arglists (quote ([res ani])), :doc "Filters the animators. This function will remove the animators returning nil,\n  with the results given. Returns a lazy seq."}, rotation-wrapper {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 93, :column 7, :end-line 93, :end-column 23, :arglists (quote ([rotation])), :doc "Returns a map of transformed rotation data."}, :name space.game/rotation-wrapper, :variadic false, :file "src/space/game.cljs", :end-column 23, :method-params ([rotation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rotation])), :doc "Returns a map of transformed rotation data."}, craft-animator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 195, :column 7, :end-line 195, :end-column 21, :arglists (quote ([provider updater])), :doc "Returns a animator of the scaft getting data from given provider,\n  performs update using given updater."}, :name space.game/craft-animator, :variadic false, :file "src/space/game.cljs", :end-column 21, :method-params ([provider updater]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([provider updater])), :doc "Returns a animator of the scaft getting data from given provider,\n  performs update using given updater."}, planets {:name space.game/planets, :file "src/space/game.cljs", :line 27, :column 1, :end-line 27, :end-column 13, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 27, :column 6, :end-line 27, :end-column 13}, :tag any}, rotating-shape-data-wrapper {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 100, :column 7, :end-line 100, :end-column 34, :arglists (quote ([data])), :doc "Returns the shape render data with x and y transformed because of rotation."}, :name space.game/rotating-shape-data-wrapper, :variadic false, :file "src/space/game.cljs", :end-column 34, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Returns the shape render data with x and y transformed because of rotation."}, partitions-generator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 167, :column 7, :end-line 167, :end-column 27, :arglists (quote ([source-x source-y source-r min-r min-len min-duration num])), :doc "Returns a lazy seq of partition animators with given params.\n  Source-x source-y and source-r determine the start point of partitions (in a cube).\n  Min-r determines the miniest size of the partition, max can be 1.5 times.\n  Min-len determines the nearest move offset of partitions, max can be 1.5 * min-len.\n  Min-duration determines the shortest duration of the partitions, max 1.5 times.\n  Num is the quantity to generate."}, :name space.game/partitions-generator, :variadic false, :file "src/space/game.cljs", :end-column 27, :method-params ([source-x source-y source-r min-r min-len min-duration num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 7, :fn-var true, :arglists (quote ([source-x source-y source-r min-r min-len min-duration num])), :doc "Returns a lazy seq of partition animators with given params.\n  Source-x source-y and source-r determine the start point of partitions (in a cube).\n  Min-r determines the miniest size of the partition, max can be 1.5 times.\n  Min-len determines the nearest move offset of partitions, max can be 1.5 * min-len.\n  Min-duration determines the shortest duration of the partitions, max 1.5 times.\n  Num is the quantity to generate."}, add-temp-animator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 119, :column 7, :end-line 119, :end-column 24, :arglists (quote ([animator])), :doc "Adds an animator to temp-animators."}, :name space.game/add-temp-animator, :variadic false, :file "src/space/game.cljs", :end-column 24, :method-params ([animator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([animator])), :doc "Adds an animator to temp-animators."}, render-each {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 251, :column 7, :end-line 251, :end-column 18, :arglists (quote ([{:keys [animator initial]} timestamp])), :doc "Returns render data of each animator."}, :name space.game/render-each, :variadic false, :file "src/space/game.cljs", :end-column 18, :method-params ([p__41263 timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [animator initial]} timestamp])), :doc "Returns render data of each animator."}, prev-timestamp {:name space.game/prev-timestamp, :file "src/space/game.cljs", :line 23, :column 1, :end-line 23, :end-column 20, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 23, :column 6, :end-line 23, :end-column 20}, :tag any}, coord-orig->frame {:name space.game/coord-orig->frame, :file "src/space/game.cljs", :line 33, :column 1, :end-line 33, :end-column 23, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 33, :column 6, :end-line 33, :end-column 23}, :tag clj-nil}, temp-animators {:name space.game/temp-animators, :file "src/space/game.cljs", :line 25, :column 1, :end-line 25, :end-column 20, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 25, :column 6, :end-line 25, :end-column 20}, :tag any}, random-color-3 {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 42, :column 7, :end-line 42, :end-column 21, :arglists (quote ([])), :doc "Returns a random color in a array with 3 values."}, :name space.game/random-color-3, :variadic false, :file "src/space/game.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a random color in a array with 3 values."}, simple-map {:name space.game/simple-map, :file "src/space/game.cljs", :line 29, :column 1, :end-line 29, :end-column 16, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 29, :column 6, :end-line 29, :end-column 16}, :tag cljs.core/IMap}, shape-arg-wrapper {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 88, :column 7, :end-line 88, :end-column 24, :arglists (quote ([& points])), :doc "Returns a vector of transformed points for shape data.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(points)], :arglists ([& points]), :arglists-meta (nil)}}, :name space.game/shape-arg-wrapper, :variadic true, :file "src/space/game.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(points)], :arglists ([& points]), :arglists-meta (nil)}, :method-params [(points)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists ([& points]), :doc "Returns a vector of transformed points for shape data."}, initialize-by-map! {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 238, :column 7, :end-line 238, :end-column 25, :arglists (quote ([data])), :doc "Initializes with map data given."}, :name space.game/initialize-by-map!, :variadic false, :file "src/space/game.cljs", :end-column 25, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Initializes with map data given."}, planet-waves-animator {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 129, :column 7, :end-line 129, :end-column 28, :arglists (quote ([x y min-r max-r duration color])), :doc "Return an animator of planet waves with given params."}, :name space.game/planet-waves-animator, :variadic false, :file "src/space/game.cljs", :end-column 28, :method-params ([x y min-r max-r duration color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 6, :fn-var true, :arglists (quote ([x y min-r max-r duration color])), :doc "Return an animator of planet waves with given params."}, coord-orig:frame {:name space.game/coord-orig:frame, :file "src/space/game.cljs", :line 35, :column 1, :end-line 35, :end-column 22, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 35, :column 6, :end-line 35, :end-column 22}, :tag clj-nil}, add-temp-animators {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 125, :column 7, :end-line 125, :end-column 25, :arglists (quote ([anis]))}, :name space.game/add-temp-animators, :variadic false, :file "src/space/game.cljs", :end-column 25, :method-params ([anis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([anis]))}, create-planet {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 227, :column 7, :end-line 227, :end-column 20, :arglists (quote ([x y r color])), :doc "Creates and add a planet."}, :name space.game/create-planet, :variadic false, :file "src/space/game.cljs", :end-column 20, :method-params ([x y r color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y r color])), :doc "Creates and add a planet."}, animators {:name space.game/animators, :file "src/space/game.cljs", :line 24, :column 1, :end-line 24, :end-column 15, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 24, :column 6, :end-line 24, :end-column 15}, :tag any}, render {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 267, :column 7, :end-line 267, :end-column 13, :arglists (quote ([timestamp])), :doc "Updates current state and return render data for rendering."}, :name space.game/render, :variadic false, :file "src/space/game.cljs", :end-column 13, :method-params ([timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 1, :fn-var true, :arglists (quote ([timestamp])), :doc "Updates current state and return render data for rendering."}, init-coord! {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 69, :column 7, :end-line 69, :end-column 18, :arglists (quote ([width height])), :doc "Initialize the coordinate system."}, :name space.game/init-coord!, :variadic false, :file "src/space/game.cljs", :end-column 18, :method-params ([width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width height])), :doc "Initialize the coordinate system."}, add-animators {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 114, :column 7, :end-line 114, :end-column 20, :arglists (quote ([& ani])), :doc "Adds several animators to the animators list.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ani)], :arglists ([& ani]), :arglists-meta (nil)}}, :name space.game/add-animators, :variadic true, :file "src/space/game.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ani)], :arglists ([& ani]), :arglists-meta (nil)}, :method-params [(ani)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 0, :fn-var true, :arglists ([& ani]), :doc "Adds several animators to the animators list."}, coord-frame->orig {:name space.game/coord-frame->orig, :file "src/space/game.cljs", :line 34, :column 1, :end-line 34, :end-column 23, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 34, :column 6, :end-line 34, :end-column 23}, :tag clj-nil}, normal-arg-wrapper {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 79, :column 7, :end-line 79, :end-column 25, :arglists (quote ([x y & values])), :doc "Returns a vector of transformed coordinate values and size values.\n  First two values are coordinate values, and the rest is size values,\n  e.g. radius, length.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(x y values)], :arglists ([x y & values]), :arglists-meta (nil)}}, :name space.game/normal-arg-wrapper, :variadic true, :file "src/space/game.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(x y values)], :arglists ([x y & values]), :arglists-meta (nil)}, :method-params [(x y values)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists ([x y & values]), :doc "Returns a vector of transformed coordinate values and size values.\n  First two values are coordinate values, and the rest is size values,\n  e.g. radius, length."}, coord-fun {:protocol-inline nil, :meta {:file "/home/linyxus/dev/clojure/space-game/src/space/game.cljs", :line 47, :column 7, :end-line 47, :end-column 16, :arglists (quote ([width height])), :doc "Returns the coordinate system converters."}, :name space.game/coord-fun, :variadic false, :file "src/space/game.cljs", :end-column 16, :method-params ([width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width height])), :doc "Returns the coordinate system converters."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:y :args :r :planets :v :rotation :color :m :circle :type :craft :angle :cx :cy :shape :animator :initial :x :a}, :order [:planets :craft :x :y :r :m :color :v :a :cx :cy :args :rotation :animator :initial :type :circle :shape :angle]}, :doc nil}